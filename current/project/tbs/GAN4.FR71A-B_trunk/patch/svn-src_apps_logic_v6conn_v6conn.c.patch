Index: src/apps/logic/v6conn/v6conn.c
===================================================================
--- src/apps/logic/v6conn/v6conn.c	(revision 21536)
+++ src/apps/logic/v6conn/v6conn.c	(working copy)
@@ -173,6 +173,7 @@
     {V6CONN_NODE_REGEX(V6CONN_DNS_ENABLE),           CHECK_FUNC, tbsCheckEnableEx},
     {V6CONN_NODE_REGEX(V6CONN_DNS_OVERRIDE),         CHECK_FUNC, tbsCheckEnableEx},
     {V6CONN_NODE_REGEX(V6CONN_DNS_USER_DEFINED),     CHECK_FUNC, V6CONN_CheckIp6DnsAddr},
+    {V6CONN_NODE_REGEX(V6CONN_DNS_SVRS),             CHECK_FUNC, V6CONN_CheckIp6DnsAddr},
     {V6CONN_NODE_REGEX(V6CONN_NTP_ENABLE),           CHECK_FUNC, tbsCheckEnableEx},
 	{V6CONN_NODE_REGEX(V6CONN_IAPD_ENABLE),          CHECK_FUNC, tbsCheckEnableEx},
     {V6CONN_ADDR_NODE_REGEX(V6CONN_ADDRING_TYPE),    CHECK_FUNC, V6CONN_CheckAddrConfigType},
@@ -700,6 +701,7 @@
 {
     const char *pszConnStat = NULL;
     const char *pszDnsOverride = NULL;
+    const char *pszIpv6Dns = NULL;
     const char *pszUserDns = NULL;
     char szTmpPath[MAX_PATH_LEN] = {0};
     int iRet = TBS_SUCCESS;
@@ -707,18 +709,29 @@
     V6CONN_TRACE_INTO_FUNC;
     V6CONN_TRACE("Path %s, Value %s\n", pszPath, pszValue);
 
-    iRet = COMM_GetMultiNodeValueEx((char *)pszPath, -1, CACHE_CFG, 3,
+    iRet = COMM_GetMultiNodeValueEx((char *)pszPath, -1, CACHE_CFG, 4,
                                     V6CONN_DNS_OVERRIDE, &pszDnsOverride,
                                     V6CONN_CONN_STAT, &pszConnStat,
+                                    V6CONN_DNS_SVRS,&pszIpv6Dns,
                                     V6CONN_DNS_USER_DEFINED, &pszUserDns);
     V6CONN_RET_RETURN(iRet, CALL_FUCTION_FAILED, "COMM_GetMultiNodeValueEx");
 
+    printf("\n\n\n");
+    printf("pszDnsOverride:%s\n", pszDnsOverride);
+    printf("pszConnStat:%s\n", pszConnStat);
+    printf("pszIpv6Dns:%s\n", pszIpv6Dns);
+    printf("pszUserDns:%s\n", pszUserDns);
+    printf("\n\n\n");
+
     if (tbsStrToBool(pszDnsOverride) == TRUE)
     {
-        iRet = COMM_SetValueEx(pszPath, -1, V6CONN_DNS_SVRS, "");
-        V6CONN_RET_RETURN(iRet, CALL_FUCTION_FAILED, "COMM_SetValueEx");
+        //iRet = COMM_SetValueEx(pszPath, -1, V6CONN_DNS_SVRS, "");
+        //V6CONN_RET_RETURN(iRet, CALL_FUCTION_FAILED, "COMM_SetValueEx");
     }
 
+    //iRet = COMM_SetValueEx(pszPath, -1, V6CONN_DNS_SVRS, pszIpv6Dns);
+    //V6CONN_RET_RETURN(iRet, CALL_FUCTION_FAILED, "COMM_SetValueEx");
+
     iRet = COMM_GetPathEx(pszPath, -1, "", szTmpPath, NULL);
     V6CONN_RET_RETURN(iRet, CALL_FUCTION_FAILED, "COMM_GetPathEx");
     COMM_RemovePathLastDot(szTmpPath);
@@ -968,7 +981,7 @@
 	{V6CONN_NODE_REGEX(V6CONN_IAPD_ENABLE), APPLY_FUNC, V6CONN_ApplyPrefixEnable},
     {V6CONN_PREFIX_NODE_REGEX("("V6CONN_SITE_PREFIX"|"V6CONN_SITE_PREFIX_LEN")"),APPLY_FUNC, V6CONN_ApplyPrefixConfig},
 
-    {V6CONN_NODE_REGEX("("V6CONN_DNS_ENABLE"|"V6CONN_DNS_OVERRIDE"|"V6CONN_DNS_USER_DEFINED")"),APPLY_FUNC, V6CONN_ApplyDnsConfig},
+    {V6CONN_NODE_REGEX("("V6CONN_DNS_ENABLE"|"V6CONN_DNS_OVERRIDE"|"V6CONN_DNS_SVRS"|"V6CONN_DNS_USER_DEFINED")"),APPLY_FUNC, V6CONN_ApplyDnsConfig},
     {V6CONN_NODE_REGEX(V6CONN_NTP_ENABLE), APPLY_FUNC, V6CONN_ApplyNtpConfig},
     {V6CONN_NODE_REGEX("("V6CONN_DUID"|"V6CONN_DUID_CONF_TYPE")"), APPLY_FUNC, V6CONN_ApplyDUIDConfig},
 
@@ -1381,10 +1394,12 @@
     int iRet  = TBS_SUCCESS;
     char szAddrListPath[MAX_PATH_LEN] = {0};
     const char *pszAddrType = NULL;
+    const char *pszAddrConfType = NULL;
     const char *pszAddrStat = NULL;
     const char *pszConnStat = NULL;
     const char *pszCurConnStat = NULL;
     const char *pszConnDevName = NULL;
+    const char *szPrefixInfo = NULL;
     ST_PARA_VAL *pstAddrList = NULL;
     ST_PARA_VAL *pstAddrListPos = NULL;
     int iTmpConnStat = IPV6_CONN_STAT_DISCONNECTED;
@@ -1447,6 +1462,20 @@
     pszConnDevName = COMM_GetNodeValueEx(pszIp6ConnPath, 0, V6CONN_CONN_DEVNAME, FROM_CFG);
     V6CONN_PTR_RETURN(pszConnDevName, TBS_FAILED, CALL_FUCTION_FAILED, "COMM_GetNodeValueEx");
 
+    /* 读取IPv6地址获取方式节点值 */
+    iRet = COMM_GetPathEx(pszIp6ConnPath, -1, V6CONN_ADDRING_TYPE, szAddrListPath, NULL);
+    V6CONN_RET_RETURN(iRet, CALL_FUCTION_FAILED, "COMM_GetPathEx");
+    pszAddrConfType = COMM_GetNodeValueEx(szAddrListPath, 0, NULL, FROM_CFG);
+    V6CONN_PTR_RETURN(pszAddrConfType, TBS_FAILED, CALL_FUCTION_FAILED, "COMM_GetNodeValueEx");
+    if (!strcasecmp(pszAddrConfType, "Static")) 
+    {
+        /* 读取前缀节点路径名称 */
+        sprintf(szAddrListPath, "%s.%s", pszIp6ConnPath, V6CONN_PREFIX_INFO);
+        V6CONN_TRACE("path:%s\n",szAddrListPath);
+        szPrefixInfo = COMM_GetNodeValueEx(szAddrListPath, 0, V6CONN_SITE_PREFIX, FROM_CFG);
+        V6CONN_PTR_RETURN(szPrefixInfo, TBS_FAILED, CALL_FUCTION_FAILED, "COMM_GetNodeValueEx");
+    }
+
     V6CONN_TRACE("Ip6ConnStatu Change, from %s to %s\n", pszCurConnStat, pszConnStat);
     if (strcasecmp(pszCurConnStat, pszConnStat))
     {
@@ -1460,6 +1489,15 @@
                                          "DeviceName", pszConnDevName);
         V6CONN_RET_RETURN(iRet, CALL_FUCTION_FAILED, "COMM_MakeAndSendCustomMsg");
 
+        if (!strcasecmp(pszAddrConfType, "Static")) 
+        {
+            /*通知lanip6更新地址*/
+            iRet = COMM_MakeAndSendCustomMsg(MSG_IP6CONN_PREFIX_CHANGED, MID_V6CONN, MID_GRP_IP6LAN_PREFIX_CHANGED, 2,
+                                             "Path", pszIp6ConnPath,
+                                             "Prefix", szPrefixInfo);
+            V6CONN_RET_RETURN(iRet, CALL_FUCTION_FAILED, "COMM_MakeAndSendCustomMsg");
+        }
+
         /*更新连接状态到配置树*/
         iRet = COMM_SetValueEx(pszIp6ConnPath, 0, V6CONN_CONN_STAT, pszConnStat);
         V6CONN_RET_RETURN(iRet, CALL_FUCTION_FAILED, "COMM_SetValueEx");
@@ -2390,6 +2428,12 @@
                                           "IPv6AddressList.1.AddressingType", CACHE_CFG);
     V6CONN_PTR_RETURN(pszAddrConfType, TBS_FAILED, CALL_FUCTION_FAILED, "COMM_GetNodeValueEx");
 
+    /*只有dhcp 方式才启用dhcp6c进程获取地址*/
+    if (!strcasecmp(pszAddrConfType, "Static") )
+    {
+        return TBS_SUCCESS;
+    }
+
     pszServiceType = COMM_GetNodeValueEx(pszIp6ConnPath, -1, V6CONN_SERVICE_LIST, CACHE_CFG);
     V6CONN_PTR_RETURN(pszServiceType, TBS_FAILED, CALL_FUCTION_FAILED, "COMM_GetNodeValueEx");
 
